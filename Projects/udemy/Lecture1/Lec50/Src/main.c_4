#include "main.h"
/*
* SVC sample for GCC-Toolchain on Cortex-M3/M4 or M4F
*/

/*
* Inline assembler helper directive: call SVC with the given immediate
*/
#define svc(code) asm volatile ("svc %[immediate]"::[immediate] "I" (code))
#define SVC_WRITE_DATA 1

/*
* Handler function definition, same parameters as the SVC function below
*/

void sv_call_write_data_handler(char *string, int length);

/*
* Use a normal C function, the compiler will make sure that this is going
* to be called using the standard C ABI which ends in a correct stack
* frame for our SVC call
*/

__attribute__ ((noinline)) void sv_call_write_data(char *string, int length)
{
    svc(SVC_WRITE_DATA);
}

/*
* SVC handler
* In this function svc_args points to the stack frame of the SVC caller
* function. Up to four 32-Bit sized arguments can be mapped easily:
* The first argument (r0) is in svc_args[0],
* The second argument (r1) in svc_args[1] and so on..
*/

void sv_call_handler_main(unsigned int *svc_args)
{
    unsigned int svc_number;

/*
* We can extract the SVC number from the SVC instruction. svc_args[6]
* points to the program counter (the code executed just before the svc
* call). We need to add an offset of -2 to get to the upper byte of
* the SVC instruction (the immediate value).
*/
    svc_number = ((char *)svc_args[6])[-2];
    switch(svc_number)
    {
        case SVC_WRITE_DATA:
        /* Handle SVC write data */
        sv_call_write_data_handler((char *)svc_args[0],(int)svc_args[1]);
        break;

        default:
        /* Unknown SVC */
        break;
    }
}

/*
* SVC Handler entry, put a pointer to this function into the vector table
*/
void __attribute__ (( naked )) sv_call_handler(void)
{
/*
* Get the pointer to the stack frame which was saved before the SVC
* call and use it as first parameter for the C-function (r0)
* All relevant registers (r0 to r3, r12 (scratch register), r14 or lr
* (link register), r15 or pc (programm counter) and xPSR (program
* status register) are saved by hardware.
*/
    asm volatile(
        "tst lr, #4\t\n" /* Check EXC_RETURN[2] */
        "ite eq\t\n"
        "mrseq r0, msp\t\n"
        "mrsne r0, psp\t\n"
        "b %[sv_call_handler_main]\t\n"
        : /* no output */
        : [sv_call_handler_main] "i" (sv_call_handler_main) /* input */
        : "r0" /* clobber */
    );
}

int main(void){
    //printf("Going to call the supervisor.\r\n");
    sv_call_write_data("Hello World!", 12);

    while(1);
}

void sv_call_write_data_handler(char *string, int length){
    printf("Supervisor call \"%s\", length %d.\r\n", string, length);
}
