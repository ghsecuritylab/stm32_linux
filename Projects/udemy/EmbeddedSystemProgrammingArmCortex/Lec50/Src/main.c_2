#include "main.h"
/*
* SVC sample for GCC-Toolchain on Cortex-M3/M4 or M4F
*/

/*
* Inline assembler helper directive: call SVC with the given immediate
*/
#define svc(code)       asm volatile ("svc %[immediate]"::[immediate] "I" (code))
#define SVC_WRITE_DATA  0x36

/*
* Handler function definition, same parameters as the SVC function below
*/

void SVC_Handler_C(unsigned int *svc_args);

/*
* Use a normal C function, the compiler will make sure that this is going
* to be called using the standard C ABI which ends in a correct stack
* frame for our SVC call
*/

__attribute__ ((noinline)) void svc_service_add(int x, int y)
{
    svc(SVC_WRITE_DATA);
}

/*
* SVC handler
* In this function svc_args points to the stack frame of the SVC caller
* function. Up to four 32-Bit sized arguments can be mapped easily:
* The first argument (r0) is in svc_args[0],
* The second argument (r1) in svc_args[1] and so on..
*/


/*
* SVC Handler entry, put a pointer to this function into the vector table
*/
void __attribute__ (( naked )) sv_call_handler(void)
{
/*
* Get the pointer to the stack frame which was saved before the SVC
* call and use it as first parameter for the C-function (r0)
* All relevant registers (r0 to r3, r12 (scratch register), r14 or lr
* (link register), r15 or pc (programm counter) and xPSR (program
* status register) are saved by hardware.
*/
    asm volatile (
        "tst lr, #4\t\n" /* Check EXC_RETURN[2] */
        "ite eq\t\n"
        "mrseq r0, msp\t\n"
        "mrsne r0, psp\t\n"
        "b %[SVC_Handler_C]\t\n"
        : [SVC_Handler_C] "i" (SVC_Handler_C) 
        : "r0"
    );
}


int main(void){
    int x , y;
    x = 0x17, y =0x27;
    svc_service_add(x,y);

    return 0;
    //printf("Going to call the supervisor.\r\n");
    //sv_call_write_data("Hello World!", 12);
}

void SVC_Handler_C(unsigned int *svc_args){
    uint32_t svc_number;
    /* svc_args[6] will give address of next instruction after "svc 0x36" instruction 
       (svc_args[6]- 2) will give the address of "svc 0x36" instruction 
       so *( ((char *)(svc_args[6])) -2 ); will give the value of svc service number 
    */

    svc_number = *( ((char *)(svc_args[6])) -2 );
    switch(svc_number) {
        case 0x36 :
        svc_args[0] = svc_args[0]+svc_args[1];
        break;
        case 0x37 :
        svc_args[0] = svc_args[0]*svc_args[1];
        break;
        default:
        break;
    }
    printf("Result = %d\n", svc_args[0]);
}


